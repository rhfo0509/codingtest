x = int(input())

d = [0] * 30001

# 만약 f(6)이라면 가능한 연산은?
# 1. 1을 빼는 경우 -> f(5)가 호출
# 2. 2를 나누는 경우 -> f(3)이 호출
# 3. 3을 나누는 경우 -> f(2)가 호출

# 최적해는 min(f(5), f(3), f(2)) + 1 가 될 수 있다.

# 이를 토대로 
# dp[i] = min(dp[i−1] + 1, dp[i//2] + 1, dp[i//3] + 1, dp[i//5] + 1)
# 라는 점화식을 도출해낼 수 있고, 이를 반복문으로 구현하면 아래와 같다.

for i in range(2, x+1):
  # 현재의 수에서 1을 빼는 경우
  d[i] = d[i - 1] + 1
  # 현재의 수가 2로 나누어 떨어지는 경우
  if i % 2 == 0:
    d[i] = min(d[i], d[i // 2] + 1)
  # 현재의 수가 3으로 나누어 떨어지는 경우
  if i % 3 == 0:
    d[i] = min(d[i], d[i // 3] + 1)
  # 현재의 수가 5로 나누어 떨어지는 경우
  if i % 5 == 0:
    d[i] = min(d[i], d[i // 5] + 1)

print(d[x])